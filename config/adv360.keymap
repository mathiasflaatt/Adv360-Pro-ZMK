#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl {
    ignore-modifiers;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp TAB &kt LALT>;
            label = "SWAPPER";
        };

        dot_spc: dot_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp DOT &kp SPACE &sk LSHIFT>,
                <&macro_tap_time 5>,
                <&macro_wait_time 0>;

            label = "DOT_SPC";
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        masked_home: masked_home {
            compatible = "zmk,behavior-mod-morph";
            label = "MASKED_HOME";
            bindings = <&kp HOME>, <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        masked_end: masked_end {
            compatible = "zmk,behavior-mod-morph";
            label = "MASKED_END";
            bindings = <&kp END>, <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mt_home: mt_home {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOME";
            bindings = <&masked_home>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <15>;
            flavor = "tap-preferred";
        };

        mt_end: mt_end {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_END";
            bindings = <&masked_end>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <15>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <7 21 39 8 22 40 54 9 23 41 55 71 72 56 42 24 10 11 12 13 27 26 25 43 44 45 59 58 57 73 74 75 35 36 37 38 52 53 65 66 67 68 69 70>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 37 53 68 69 70>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hml_repeat: hml_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_REPEAT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <13 7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 52 65 66 67>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hmr_lpar_lt: hmr_lpar_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LPAR_LT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hmr_rpar_gt: hmr_rpar_gt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RPAR_GT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 53 68 69 70>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        cpy_pst: cpy_pst {
            compatible = "zmk,behavior-tap-dance";
            label = "CPY_PST";
            #binding-cells = <0>;
            tapping-term-ms = <125>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &mt EXCLAMATION N1  &mt AT_SIGN N2  &mt HASH N3         &mt DOLLAR N4  &mt PERCENT N5  &tog 2                                                                               &mo 4              &mt CARET N6  &mt AMPS N7        &mt LS(ASTERISK) N8  &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &kp MINUS
&kp TAB     &kp Q               &kp W           &kp F               &kp P          &kp B           &kp SLASH                                                                            &kp LS(LA(MINUS))  &kp J         &kp L              &kp U                &kp Y                    &kp SINGLE_QUOTE          &kp BSLH
&kp DEL     &hm LEFT_GUI A      &hm LEFT_ALT S  &hm LEFT_CONTROL R  &hm LSHIFT T   &kp G           &kp MINUS  &cpy_pst   &kp LG(V)             &kp LC(LS(R))      &kp LS(LC(LEFT_ALT))  &kp EQUAL          &kp M         &hm RIGHT_SHIFT N  &hm RIGHT_CONTROL E  &hm RIGHT_ALT I          &hm RIGHT_GUI O           &kp SQT
&kp LSHFT   &kp Z               &kp X           &kp C               &kp D          &kp V                                 &kp C_PREV            &kp C_NEXT                                                  &kp K         &kp N              &kp COMMA            &kp DOT                  &kp FSLH                  &kp RSHFT
&mo 2       &kp GRAVE           &kp CAPS        &kp LEFT            &kp RIGHT                      &mo 1      &kp SPACE  &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES  &kp ENTER             &kp BACKSPACE                    &kp UP             &kp DOWN             &kp LBKT                 &kp RBKT                  &mo 3
            >;
        };

        nav {
            bindings = <
&trans  &trans    &trans    &trans       &trans     &trans  &trans                                      &trans  &trans     &trans                       &trans             &trans           &trans   &trans
&trans  &trans    &trans    &kp LG(TAB)  &swapper   &trans  &trans                                      &trans  &kp PG_UP  &mt LC(BACKSPACE) BACKSPACE  &mt LC(HOME) UP    &mt LC(DEL) DEL  &trans   &trans
&trans  &sk LGUI  &sk LALT  &trans       &sk LSHFT  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp PG_DN  &mt_home 0 LEFT_ARROW        &mt LC(HOME) DOWN  &mt_end 0 RIGHT  &kp RET  &trans
&trans  &trans    &trans    &trans       &trans     &trans                  &trans      &trans                  &trans     &kp TAB                      &kp LT             &kp GT           &trans   &trans
&trans  &trans    &trans    &trans       &trans             &trans  &trans  &trans      &trans  &trans  &trans             &trans                       &trans             &trans           &trans   &trans
            >;

            label = "Navigation";
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 4      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 3      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 3
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 2                                      &mo 4   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
